## Problem Statement {#sec-energy-intro .unnumbered}

```{r}
#| results: "asis"
#| echo: false
library(here)
invisible(capture.output(source(here("scripts", "global.R"))))
invisible(capture.output(source(here("scripts", "helpers.R"))))

damage <- get_damage()
geo <- get_geo()
damage_grid <- get_damage_grid()
X <- damage_grid %>%
  group_by(municipality_id) %>%
  summarise(n_data = sum(n_data), .groups = "drop")

damage_geo <- geo %>% left_join(X, by = join_by(municipality_id)) %>%
  replace_na(list(n_data=0))



```

\

::: {.callout-tip title="Summary"}
As an initial step, we want to understand the data we have available. Unfortunately, we have to conclude that our data representation is very sparse. 
:::


\
\

### Crop Distribution

We can see that, out of the 49 crops, only some 20 have more than 20 data entries.

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true

damage_grid %>%
  group_by(crop_key) %>%
  summarise(n_data = sum(has_data), .groups = "drop") %>%
  arrange(desc(n_data)) %>%
  mutate(crop_key = factor(crop_key, levels = crop_key)) %>%
  ggplot( aes(x = crop_key, y = n_data)) +
    geom_col(fill = "darkblue", alpha = 0.5) +
    labs(title =  element_blank(), x = "Crop", y = "Count") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

\
\

### Year Distribution

The years, on the other hand, are relatively well distributed.

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true

damage_grid %>%
  group_by(year) %>%
  summarise(n_data = sum(has_data), .groups = "drop") %>%
  arrange(desc(year)) %>%
  mutate(year = factor(year, levels = year)) %>%
  ggplot( aes(x = year, y = n_data)) +
  geom_col(fill = "darkred",  alpha = 0.5) +
  labs(title = element_blank(), x = "Year", y = "Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

\
\

### Geographic Distribution

#### Distribution by Municipality

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true
damage_geo %>% 
  sf::st_drop_geometry()%>%
  arrange(desc(n_data))%>%
  mutate(municipality_id = factor(municipality_id, levels = municipality_id)) %>%
  ggplot( aes(x = municipality_id, y = n_data)) +
  geom_col(fill = "darkgreen",  alpha = 0.8) +
  labs(title = "Top Years by Count", x = "Year", y = "Count") +
  theme_minimal() +
  theme(axis.text.x =  element_blank())


```

\

#### Distribution by District

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true
damage_geo %>%
  sf::st_drop_geometry()%>%
  group_by(district_name) %>%
  summarise(n_data = n(), .groups = "drop") %>%
  arrange(desc(n_data))%>%
  mutate(district_name = factor(district_name, levels = district_name)) %>%
  ggplot( aes(x = district_name, y = n_data)) +
  geom_col(fill = "darkgreen",  alpha = 0.5) +
  labs(title =  element_blank(), x = "District", y = "Count") +
  theme_minimal()+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

\

#### Distribution by Agro Region

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true
damage_geo %>%
  sf::st_drop_geometry()%>%
  group_by(agro_region) %>%
  summarise(n_data = n(), .groups = "drop") %>%
  arrange(desc(n_data))%>%
  mutate(agro_region = factor(agro_region, levels = agro_region)) %>%
  ggplot( aes(x = agro_region, y = n_data)) +
  geom_col(fill = "darkgreen",  alpha = 0.3) +
  labs(title =  element_blank(), x = "Agro Region", y = "Count") +
  theme_minimal()

```

\

#### Distribution on a Map

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true

damage_geo %>%
  dplyr::select(n_data) %>%
  ggplot() +
  geom_sf(aes(fill = n_data), color = "lightgray", size = 0.1) +
  scale_fill_gradient(low = "white", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Spatial Frequency Distribution", fill = "Freq")
```

\
\

### Data Space

We can conceptualize these data as a data space, where each variable is a dimension. Hence:

-   We have `r length(unique(damage_grid$municipality_id))` municipalities
-   We have `r length(unique(damage_grid$crop_key))` crops
-   We have `r length(unique(damage_grid$year))` years
-   Our data set has `r sum(damage_grid$n_data)` entries

Which means that our data space is `r nrow(damage_grid)`. Our data set covers `r round(sum(damage_grid$n_data)/nrow(damage_grid)*100, 3)`% of the information space.

With other words, we have very sparse data. The subsequent cubes give us a visual idea about the densities of these data and how they behave on geographic aggregation.

\


#### On Municipality Level

```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false

aglev <- "municipality_id"
group_vars <- c("crop_key", "year", aglev)
damage_plot <- damage_grid %>%
  group_by(across(any_of(group_vars))) %>%
 # group_by(agro_region, crop_key, year) %>%
  summarise(size = sum(n_data), .groups = "drop") %>%
  mutate(
    geo = as.integer(as.factor(.data[[aglev]])),
    crop = as.integer(as.factor(crop_key)),
    year = as.integer(year)
  )

p1 <- plot_ly(
  data = damage_plot,
  x = ~geo,
  y = ~year,
  z = ~crop,
  type = 'scatter3d',
  mode = 'markers',
  color = "darkblue",
  marker = list(size = ~size, opacity = 0.3),
  showlegend = TRUE
) %>%
  layout(
    title = "Data Space",
    scene = list(
      xaxis = list(title = aglev),
      yaxis = list(title = "Year"),
      zaxis = list(title = "Crop")
    )
  )

htmlwidgets::saveWidget(p1, file = paste0("../www/graph/",aglev,".html"), selfcontained = TRUE)
cat(glue::glue('<iframe src="../www/graph/{aglev}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```

\

#### On District Level

```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false

aglev <- "district_name"
group_vars <- c("crop_key", "year", aglev)
damage_plot <- damage_grid %>%
  group_by(across(any_of(group_vars))) %>%
  summarise(size = sum(n_data), .groups = "drop") %>%
  mutate(
    geo = as.integer(as.factor(.data[[aglev]])),
    crop = as.integer(as.factor(crop_key)),
    year = as.integer(year)
  )

p2 <- plot_ly(
  data = damage_plot,
  x = ~.data[[aglev]],
  y = ~year,
  z = ~crop,
  type = 'scatter3d',
  mode = 'markers',
  color = "darkred",
  marker = list(size = ~size, opacity = 0.3),
  showlegend = TRUE
) %>%
  layout(
    title = "Data Space",
    scene = list(
      xaxis = list(title = aglev),
      yaxis = list(title = "Year"),
      zaxis = list(title = "Crop")
    )
  )

htmlwidgets::saveWidget(p2, file = paste0("../www/graph/",aglev,".html"), selfcontained = TRUE)
cat(glue::glue('<iframe src="../www/graph/{aglev}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```

\

#### On Agro Region Level

```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false

aglev <- "agro_region"
group_vars <- c("crop_key", "year", aglev)
damage_plot <- damage_grid %>%
  group_by(across(any_of(group_vars))) %>%
  summarise(size = sum(n_data), .groups = "drop") %>%
  mutate(
    geo = as.integer(as.factor(.data[[aglev]])),
    crop = as.integer(as.factor(crop_key)),
    year = as.integer(year)
  )

p3 <- plot_ly(
  data = damage_plot,
  x = ~.data[[aglev]],
  y = ~year,
  z = ~crop,
  type = 'scatter3d',
  mode = 'markers',
  color = "darkgreen",
  marker = list(size = ~size, opacity = 0.3),
  showlegend = TRUE
) %>%
  layout(
    title = "Data Space",
    scene = list(
      xaxis = list(title = aglev),
      yaxis = list(title = "Year"),
      zaxis = list(title = "Crop")
    )
  )

htmlwidgets::saveWidget(p3, file = paste0("../www/graph/",aglev,".html"), selfcontained = TRUE)
cat(glue::glue('<iframe src="../www/graph/{aglev}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```
