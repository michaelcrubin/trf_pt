
# Visual Inspection {#sec-energy-intro .unnumbered}

```{r}
#| warning: false
#| eval: true
#| echo: false
#| message: false
library(here)

source(here("scripts", "helpers.R"))
source(here("scripts", "analysis_funcs.R"))

var_id <- "rain_hour"
country <- "switzerland"
suffix <- "w_mb"

event_metrics <- readRDS(here("DB", "analysis", paste0("raw_metrics_",var_id, "_", country, "_",suffix,".rds")))


```

\
\

::: {.callout-tip title="Temporal dependence of Rain events"}
The evaluation yields us a large set of results with all 8 metrics for `r nrow(event_metrics)` events (i.e. `r length(unique(event_metrics$loc_id))
` location, `nrow(event_metrics) / length(unique(event_metrics$model_name))/ length(unique(event_metrics$loc_id))
` events, `r length(unique(event_metrics$model_name))
` models). The next challenge is to make sense of these data.
:::

\
\
\



### Sample View

```{r}
#| warning: false
#| eval: true
#| echo: false
#| message: false
vecs <-event_metrics %>% slice_sample(n=20)
mke_DT(vecs)

```

\



### Bias x Precision x Timing

The below plot shows all errors per event on 3 axes:

- Bias is the log_bias
- Precision is the nRMSE
- Timing is the centroid_lag

We can already see that the bias is heavily skewed towards the negative side.
\
```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false
graph <- "bias_precision_timing"
p <- event_metrics %>% normalize_bpt() %>% point_plot(nsd = 3)
htmlwidgets::saveWidget(p, file = glue::glue("../www/graph/{graph}.html"), selfcontained = TRUE)
rm(p)
cat(glue::glue('<iframe src="../www/graph/{graph}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```

\
\



### Bias x Precision x Timing by Model

The below plot allows to select the model and is therefore less polluted.
The Red ball is the ideal point and the colored large ball represents the center of mass for the model.
We can see that different models show different behavour in terms of bias and timing.
\

```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false
graph <- "bias_precision_timing_select"
p <- event_metrics %>% normalize_bpt() %>% selection_plot(nsd = 3)
htmlwidgets::saveWidget(p, file = glue::glue("../www/graph/{graph}.html"), selfcontained = TRUE)
rm(p)
cat(glue::glue('<iframe src="../www/graph/{graph}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```

\
\


### Aggregation over Events

We now aggregate over all events per year, i.e. we will get data points per location, year and model.
As expected, this reduces the noise strongly. Also, interestingly a clear V shape on the bias axis emerges. This is to be expected, because you have either over or underestimation. It makes sense to distinguish these two parts. We can also see cleared distinctions between models.

\


```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false
graph <- "bias_precision_timing_aggregated"
p <- event_metrics %>% SUMMARIZE_evaluation(c("model_name", "year", "loc_id")) %>% normalize_bpt() %>% point_plot(nsd = 3)
htmlwidgets::saveWidget(p, file = glue::glue("../www/graph/{graph}.html"), selfcontained = TRUE)
rm(p)
cat(glue::glue('<iframe src="../www/graph/{graph}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```


\
\



### Aggregated Results (over all Time)

We now aggregate over all time, meaning we are left with data points for each location and model. This gives us the first overall evaluation.



#### Table

```{r}
#| warning: false
#| eval: true
#| echo: false
#| message: false

vecs <-event_metrics %>%
  mutate(bias_dir = ifelse(sum_ratio - 1 >= 0, "over", "under")) %>%
  SUMMARIZE_evaluation( c("model_name", "bias_dir")) %>%
  normalize_bpt()#
mke_DT(vecs)
```

\

#### Vector Plot

The plot show the average performance of each model in both positive and negative bias direction. It is the least polluted graph and shows some first results.

\


```{r}
#| echo: false
#| results: asis
#| warning: false
#| message: false
graph <- "vectors"
p <- vector_plot(vecs)
htmlwidgets::saveWidget(p, file = glue::glue("../www/graph/{graph}.html"), selfcontained = TRUE)
rm(p)
cat(glue::glue('<iframe src="../www/graph/{graph}.html" width="100%" height="600px" style="border:none;"></iframe>'))
```

\

#### Vector Distances

It's a normed distance on 3D, hence, max can be sqrt(3)=1.73

```{r}
#| warning: false
#| eval: true
#| echo: false
#| message: false

scaled_from_zero <- function(x) abs(x) / max(abs(x))

vecs %>%
  dplyr::mutate(
    bias = scaled_from_zero(bias),
    precision = scaled_from_zero(precision),
    timing = scaled_from_zero(timing)
    )%>% 
  dplyr::mutate(euclidean_dist = sqrt(bias^2 + precision^2 + timing^2)) %>%
  dplyr::select(model_name, bias_dir, euclidean_dist) %>%
  tidyr::pivot_wider(names_from = bias_dir, values_from = euclidean_dist, names_glue = "distance_{bias_dir}") %>%
  mke_DT()

```

\


